import { NextRequest, NextResponse } from "next/server";
import { z } from "zod";
import { prisma } from "@/lib/prisma";
import { comparePassword } from "@/lib/password";
import { signAccessToken } from "@/lib/jwt";
export const runtime = "nodejs";

const schema = z.object({
  email: z.string().email().max(255),
  password: z.string().min(8).max(200),
});

export async function POST(req: NextRequest) {
  try {
    const body = await req.json();
    const { email, password } = schema.parse(body);
    const lower = email.toLowerCase();

    const user = await prisma.user.findUnique({ where: { email: lower } });
    if (!user?.passwordHash) {
      return NextResponse.json({ error: "Identifiants invalides" }, { status: 401 });
    }
    const ok = await comparePassword(password, user.passwordHash);
    if (!ok) {
      return NextResponse.json({ error: "Identifiants invalides" }, { status: 401 });
    }

    const token = signAccessToken({ sub: user.id, email: user.email, role: user.role });
    const res = NextResponse.json({ ok: true });
    res.cookies.set("access_token", token, { httpOnly: true, sameSite: "lax", path: "/", secure: process.env.NODE_ENV === "production", maxAge: 60 * 30 });
    return res;
  } catch (err: any) {
    if (err?.issues) {
      return NextResponse.json({ error: "Entr√©es invalides" }, { status: 400 });
    }
    return NextResponse.json({ error: "Erreur serveur" }, { status: 500 });
  }
}
